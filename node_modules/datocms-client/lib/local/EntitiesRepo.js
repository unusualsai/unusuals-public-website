"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _JsonApiEntity = _interopRequireDefault(require("./JsonApiEntity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function payloadEntities(payload) {
  var accumulator = [];

  if (payload.data) {
    if (Array.isArray(payload.data)) {
      accumulator.push.apply(accumulator, _toConsumableArray(payload.data));
    } else {
      accumulator.push(payload.data);
    }
  }

  if (payload.included) {
    accumulator.push.apply(accumulator, _toConsumableArray(payload.included));
  }

  return accumulator;
}

var EntitiesRepo = /*#__PURE__*/function () {
  function EntitiesRepo() {
    _classCallCheck(this, EntitiesRepo);

    this.entities = {};
    this.destroyListeners = [];
    this.upsertListeners = [];
    this.upsertEntities.apply(this, arguments);
  }

  _createClass(EntitiesRepo, [{
    key: "serializeState",
    value: function serializeState() {
      return Object.entries(this.entities).reduce(function (acc, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            type = _ref2[0],
            entitiesById = _ref2[1];

        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, type, Object.entries(entitiesById).reduce(function (acc2, _ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              id = _ref4[0],
              entity = _ref4[1];

          return _objectSpread(_objectSpread({}, acc2), {}, _defineProperty({}, id, entity.payload));
        }, {})));
      }, {});
    }
  }, {
    key: "loadState",
    value: function loadState(serializedState) {
      var _this = this;

      this.entities = Object.entries(serializedState).reduce(function (acc, _ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            type = _ref6[0],
            entitiesById = _ref6[1];

        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, type, Object.entries(entitiesById).reduce(function (acc2, _ref7) {
          var _ref8 = _slicedToArray(_ref7, 2),
              id = _ref8[0],
              payload = _ref8[1];

          return _objectSpread(_objectSpread({}, acc2), {}, _defineProperty({}, id, new _JsonApiEntity["default"](payload, _this)));
        }, {})));
      }, {});
    }
  }, {
    key: "addDestroyListener",
    value: function addDestroyListener(cb) {
      var _this2 = this;

      this.destroyListeners.push(cb);
      return function () {
        _this2.destroyListeners = _this2.destroyListeners.filter(function (x) {
          return x !== cb;
        });
      };
    }
  }, {
    key: "addUpsertListener",
    value: function addUpsertListener(cb) {
      var _this3 = this;

      this.upsertListeners.push(cb);
      return function () {
        _this3.upsertListeners = _this3.upsertListeners.filter(function (x) {
          return x !== cb;
        });
      };
    }
  }, {
    key: "destroyAllEntities",
    value: function destroyAllEntities() {
      var _this4 = this;

      // Order is important here! See ie. gatsby-source-datocms `destroyEntityNode` function!
      ['item', 'field', 'item_type', 'upload', 'site'].forEach(function (type) {
        if (_this4.entities[type]) {
          _this4.destroyEntities(type, Object.keys(_this4.entities[type]));
        }
      });
    }
  }, {
    key: "upsertEntities",
    value: function upsertEntities() {
      var _this5 = this;

      var entities = [];

      for (var _len = arguments.length, payloads = new Array(_len), _key = 0; _key < _len; _key++) {
        payloads[_key] = arguments[_key];
      }

      payloads.forEach(function (payload) {
        payloadEntities(payload).forEach(function (entityPayload) {
          var entity = new _JsonApiEntity["default"](entityPayload, _this5);
          entities.push(entity);
          _this5.entities[entity.type] = _this5.entities[entity.type] || {};
          _this5.entities[entity.type][entity.id] = entity;
        });
      });
      this.upsertListeners.forEach(function (cb) {
        return entities.forEach(cb);
      });
    }
  }, {
    key: "destroyEntities",
    value: function destroyEntities(type, ids) {
      var _this6 = this;

      var entities = [];
      ids.forEach(function (id) {
        if (_this6.entities[type] && _this6.entities[type][id]) {
          entities.push(_this6.entities[type][id]);
          delete _this6.entities[type][id];
        }
      });
      this.destroyListeners.forEach(function (cb) {
        return entities.forEach(cb);
      });
    }
  }, {
    key: "destroyItemType",
    value: function destroyItemType(id) {
      var itemIds = Object.values(this.entities.item).filter(function (item) {
        return item.itemType.id === id;
      }).map(function (item) {
        return item.id;
      });
      this.entitiesRepo.destroyEntities('item', itemIds);
      this.entitiesRepo.destroyEntities('item_type', [id]);
    }
  }, {
    key: "findEntitiesOfType",
    value: function findEntitiesOfType(type) {
      return Object.values(this.entities[type] || {});
    }
  }, {
    key: "findEntity",
    value: function findEntity(type, id) {
      return this.entities[type] && this.entities[type][id];
    }
  }, {
    key: "site",
    get: function get() {
      return this.findEntitiesOfType('site')[0];
    }
  }]);

  return EntitiesRepo;
}();

exports["default"] = EntitiesRepo;