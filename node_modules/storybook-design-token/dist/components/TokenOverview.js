"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var TokenPresenter_1 = require("./presenter/TokenPresenter");
var Card_1 = require("./primitives/Card");
var Collapsible_1 = require("./primitives/Collapsible");
var Input_1 = require("./primitives/Input");
var Table_1 = require("./primitives/Table");
var TokenName_1 = require("./primitives/TokenName");
exports.TokenOverview = function (_a) {
    var tokenGroup = _a.tokenGroup, viewType = _a.viewType;
    var _b = React.useState([]), tokens = _b[0], setTokens = _b[1];
    React.useEffect(function () {
        if (tokenGroup) {
            setTokens(tokenGroup.tokens);
        }
    }, [tokenGroup]);
    var changeTokenValue = React.useMemo(function () { return function (token, value) {
        setTokens(tokens.map(function (t) { return (t.key === token.key ? __assign(__assign({}, t), { value: value }) : t); }));
        var previewIframe = document.querySelector('#storybook-preview-iframe');
        previewIframe.contentWindow.document.documentElement.style.setProperty(token.key, value);
    }; }, [tokens]);
    var resetTokenValue = React.useMemo(function () { return function (token) {
        setTokens(tokenGroup.tokens.map(function (t) {
            return t.key === token.key ? t : tokens.find(function (to) { return to.key === t.key; });
        }));
        var previewIframe = document.querySelector('#storybook-preview-iframe');
        previewIframe.contentWindow.document.documentElement.style.setProperty(token.key, tokenGroup.tokens.find(function (t) { return t.key === token.key; }).value);
    }; }, [tokens]);
    return (React.createElement(React.Fragment, null,
        React.createElement(Collapsible_1.Collapsible, { id: tokenGroup.label, title: tokenGroup.label },
            viewType === 'card' &&
                tokens.map(function (token) { return (React.createElement(Card_1.Card, { aliases: token.aliases && token.aliases.join(', '), description: token.description, key: token.key, preview: tokenGroup.presenter && (React.createElement(TokenPresenter_1.TokenPresenter, { type: tokenGroup.presenter, token: token })), title: React.createElement(TokenName_1.TokenName, { token: token }), value: !token.editable ? (React.createElement(React.Fragment, null, token.value)) : (React.createElement(Input_1.Input, { value: token.value, onChange: function (value) { return changeTokenValue(token, value); }, onReset: function () { return resetTokenValue(token); }, showReset: token.editable &&
                            tokenGroup.tokens.find(function (t) { return t.key === token.key; }).value !==
                                token.value })) })); }),
            viewType === 'table' && (React.createElement(Table_1.Table, null,
                React.createElement("thead", null,
                    React.createElement("tr", null,
                        React.createElement("th", null, "Token"),
                        React.createElement("th", null, "Aliases"),
                        React.createElement("th", null, "Value"),
                        React.createElement("th", null, "Example"))),
                React.createElement("tbody", null, tokens.map(function (token) { return (React.createElement("tr", { key: token.key },
                    React.createElement("td", null,
                        React.createElement(TokenName_1.TokenName, { token: token }),
                        React.createElement("span", null, token.description)),
                    React.createElement("td", null, token.aliases && token.aliases.join(', ')),
                    React.createElement("td", null, !token.editable ? (React.createElement(React.Fragment, null, token.value)) : (React.createElement(Input_1.Input, { value: token.value, onChange: function (value) { return changeTokenValue(token, value); }, onReset: function () { return resetTokenValue(token); }, showReset: token.editable &&
                            tokenGroup.tokens.find(function (t) { return t.key === token.key; })
                                .value !== token.value }))),
                    React.createElement("td", null, tokenGroup.presenter && (React.createElement(TokenPresenter_1.TokenPresenter, { type: tokenGroup.presenter, token: token }))))); })))))));
};
