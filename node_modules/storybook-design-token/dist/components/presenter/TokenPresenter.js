"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var AnimationToken_1 = require("./AnimationToken");
var BorderRadiusToken_1 = require("./BorderRadiusToken");
var BorderToken_1 = require("./BorderToken");
var ColorToken_1 = require("./ColorToken");
var EasingToken_1 = require("./EasingToken");
var FontFamily_1 = require("./FontFamily");
var FontSizeToken_1 = require("./FontSizeToken");
var FontWeightToken_1 = require("./FontWeightToken");
var GradientToken_1 = require("./GradientToken");
var LineHeightToken_1 = require("./LineHeightToken");
var OpacityToken_1 = require("./OpacityToken");
var ShadowToken_1 = require("./ShadowToken");
var SpacingToken_1 = require("./SpacingToken");
var SvgToken_1 = require("./SvgToken");
var renderMatchingPresenter = function (type, property) {
    switch (type) {
        case 'Animation':
            return React.createElement(AnimationToken_1.AnimationToken, { animation: property.value });
        case 'Border':
            return React.createElement(BorderToken_1.BorderToken, { border: property.value });
        case 'BorderRadius':
            return React.createElement(BorderRadiusToken_1.BorderRadiusToken, { borderRadius: property.value });
        case 'Color':
            return React.createElement(ColorToken_1.ColorToken, { color: property.value });
        case 'Easing':
            return React.createElement(EasingToken_1.EasingToken, { easing: property.value });
        case 'FontFamily':
            return React.createElement(FontFamily_1.FontFamilyToken, { fontFamily: property.value });
        case 'FontSize':
            return React.createElement(FontSizeToken_1.FontSizeToken, { fontSize: property.value });
        case 'FontWeight':
            return React.createElement(FontWeightToken_1.FontWeightToken, { fontWeight: +property.value });
        case 'Gradient':
            return React.createElement(GradientToken_1.GradientToken, { gradient: property.value });
        case 'LineHeight':
            return React.createElement(LineHeightToken_1.LineHeightToken, { lineHeight: +property.value });
        case 'Opacity':
            return React.createElement(OpacityToken_1.OpacityToken, { opacity: +property.value });
        case 'Shadow':
            return React.createElement(ShadowToken_1.ShadowToken, { shadow: property.value });
        case 'Spacing':
            return React.createElement(SpacingToken_1.SpacingToken, { spacing: property.value });
        case 'Svg':
            return React.createElement(SvgToken_1.SvgToken, { svg: property.value });
        default:
            return React.createElement(React.Fragment, null);
    }
};
exports.TokenPresenter = function (props) {
    return renderMatchingPresenter(props.type, props.token);
};
