"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var comment_parser_1 = require("./comment-parser");
var mensch = require('mensch');
var CssParser = /** @class */ (function () {
    function CssParser() {
    }
    CssParser.prototype.parse = function (tokenFiles) {
        var tokenGroups = this.mapTokenFilesToTokenGroups(tokenFiles);
        return {
            hardCodedValues: this.mapTokenFilesToHardCodedValues(tokenFiles, tokenGroups),
            keyframes: this.mapTokenFilesToKeyframes(tokenFiles),
            tokenGroups: tokenGroups
        };
    };
    CssParser.prototype.mapTokenFilesToHardCodedValues = function (tokenFiles, tokenGroups) {
        if (!tokenFiles || !tokenFiles.css) {
            return [];
        }
        var tokens = tokenGroups.map(function (tokenGroup) { return tokenGroup.tokens; }).flat();
        var declarations = tokenFiles.css
            .map(function (tokenFile) {
            return mensch
                .parse(tokenFile.content, {
                comments: true,
                position: true
            })
                .stylesheet.rules.map(function (rule) {
                return rule.declarations &&
                    rule.declarations
                        .filter(function (declaration) { return declaration.type === 'property'; })
                        .map(function (declaration) { return (__assign(__assign({}, declaration), { filename: tokenFile.filename })); });
            })
                .flat();
        })
            .flat()
            .filter(function (item) { return !!item && item.name.indexOf('--') !== 0; });
        return tokens
            .map(function (token) { return ({
            token: token,
            values: declarations
                .filter(function (declaration) {
                return declaration.value && declaration.value.indexOf(token.value) > -1;
            })
                .map(function (declaration) { return ({
                file: declaration.filename,
                line: declaration.position.start.line,
                value: declaration.value
            }); })
        }); })
            .filter(function (item) { return item.values.length > 0; });
    };
    CssParser.prototype.mapTokenFilesToKeyframes = function (tokenFiles) {
        if (!tokenFiles || !tokenFiles.css) {
            return '';
        }
        return tokenFiles.css
            .map(function (tokenFile) {
            var parsed = {
                type: 'stylesheet',
                stylesheet: {
                    rules: mensch
                        .parse(tokenFile.content, {
                        comments: true,
                        position: true
                    })
                        .stylesheet.rules.filter(function (rule) { return rule.type === 'keyframes'; })
                }
            };
            return mensch.stringify(parsed);
        })
            .flat()
            .join('');
    };
    CssParser.prototype.mapTokenFilesToTokenGroups = function (tokenFiles) {
        var _this = this;
        if (!tokenFiles || !tokenFiles.css) {
            return [];
        }
        var parsedTokenFiles = tokenFiles.css.map(function (tokenFile) {
            return mensch.parse(tokenFile.content, {
                comments: true,
                position: true
            }).stylesheet.rules;
        });
        return parsedTokenFiles
            .map(function (tokenFile) {
            var tokenGroups = tokenFile
                .filter(function (item) {
                return item.type === 'comment' && item.text.indexOf('@tokens') > -1;
            })
                .map(function (item) { return (__assign(__assign({}, item), { parsedText: _this.parseCommentBlock(item.text) })); })
                .map(function (item, index, items) {
                return _this.mapTokenGroup(item, items[index + 1], tokenFile, parsedTokenFiles);
            });
            return tokenGroups;
        })
            .flat();
    };
    CssParser.prototype.mapTokenGroup = function (item, nextItem, parsedTokenFile, parsedTokenFiles) {
        var presenterTag = item.parsedText.tags.find(function (t) { return t.tag === 'presenter'; });
        return this.addTokensToTokenGroup({
            label: item.parsedText.tags
                .find(function (t) { return t.tag === 'tokens'; })
                .source.replace('@tokens', '')
                .trim(),
            position: {
                start: item.position.start.line,
                end: nextItem ? nextItem.position.start.line - 1 : Infinity
            },
            presenter: presenterTag ? presenterTag.name : undefined,
            tokens: []
        }, parsedTokenFile, parsedTokenFiles);
    };
    CssParser.prototype.addTokensToTokenGroup = function (tokenGroup, parsedTokenFile, parsedTokenFiles) {
        var relevantRules = parsedTokenFile
            .filter(function (item) { return item.type === 'rule'; })
            .find(function (item) {
            return item.position.start.line >= tokenGroup.position.start &&
                item.position.end.line <= tokenGroup.position.end;
        });
        var tokens = !relevantRules
            ? []
            : relevantRules.declarations
                .map(function (declaration, index, declarations) {
                var nextDeclaration = declarations[index + 1];
                return __assign(__assign({}, declaration), { description: nextDeclaration && nextDeclaration.type === 'comment'
                        ? nextDeclaration.text.replace(/\*/g, '').trim()
                        : '' });
            })
                .filter(function (declaration) {
                return declaration.type === 'property' && declaration.name.match(/^--/);
            })
                .map(function (declaration, index, declarations) {
                var declarationsFromOtherFiles = parsedTokenFiles
                    .map(function (tokenFile) {
                    return tokenFile
                        .filter(function (item) { return item.type === 'rule'; })
                        .map(function (item) { return item.declarations; })
                        .map(function (declarations) {
                        return declarations.filter(function (declaration) {
                            return declaration.type === 'property' &&
                                declaration.name.match(/^--/);
                        });
                    });
                })
                    .flat(Infinity);
                var aliases = declarationsFromOtherFiles
                    .filter(function (d) { return d.value === "var(" + declaration.name + ")"; })
                    .map(function (declaration) { return declaration.name; });
                return {
                    aliases: aliases,
                    description: declaration.description,
                    editable: true,
                    key: declaration.name,
                    value: declaration.value
                };
            })
                .filter(function (token) { return !token.value.match(/^var\(--.+/); });
        return __assign(__assign({}, tokenGroup), { tokens: tokens });
    };
    CssParser.prototype.parseCommentBlock = function (string) {
        return comment_parser_1.parse("/*" + string + "*/")[0];
    };
    return CssParser;
}());
exports.CssParser = CssParser;
