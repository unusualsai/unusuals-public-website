"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var css_parser_1 = require("./css.parser");
var TEST_FILES = {
    empty: '',
    multipleTokenGroup: "/**\n    * @tokens Colors\n    * @presenter Swatch\n    */\n   \n    :root {\n      --blue: blue;\n      --red: red;\n    }\n  \n    /**\n    * @tokens Font Sizes\n    * @presenter FontSize\n    */\n   \n    :root {\n      --fs-m: 14px;\n    }",
    singleTokenGroup: "/**\n    * @tokens Colors\n    * @presenter Swatch\n    */\n   \n   :root {\n     --blue: blue;\n     --red: red;\n   }",
    withAliases: "/**\n    * @tokens Colors\n    * @presenter Swatch\n    */\n   \n    :root {\n      --blue: blue;\n      --red: red;\n      \n      --primary: var(--blue);\n      --secondary: var(--red);\n    }",
    withEmptyTokenGroup: "/**\n  * @tokens Colors\n  * @presenter Swatch\n  */",
    withKeyframe: "/**\n  * @tokens Animations\n  * @presenter Animation\n  */\n \n   @keyframes fade-in {\n     from {\n       opacity: 0;\n     }\n     to {\n       opacity: 1;\n     }\n   }",
    withoutAnnotations: 'body { color: red; }'
};
describe('CssParser', function () {
    var parser;
    beforeEach(function () {
        parser = new css_parser_1.CssParser();
    });
    it('should parse empty token file list', function () {
        expect(parser.parse({ css: [], scss: [] })).toEqual({
            hardCodedValues: [],
            keyframes: '',
            tokenGroups: []
        });
    });
    it('should parse empty token files', function () {
        expect(parser.parse({
            css: [{ filename: 'empty.css', content: TEST_FILES.empty }],
            scss: [{ filename: 'empty.css', content: TEST_FILES.empty }]
        })).toEqual({
            hardCodedValues: [],
            keyframes: '',
            tokenGroups: []
        });
    });
    it('should parse files without annotations', function () {
        expect(parser.parse({
            css: [
                {
                    filename: 'withoutAnnotations.css',
                    content: TEST_FILES.withoutAnnotations
                }
            ],
            scss: [
                {
                    filename: 'withoutAnnotations.css',
                    content: TEST_FILES.withoutAnnotations
                }
            ]
        })).toEqual({
            hardCodedValues: [],
            keyframes: '',
            tokenGroups: []
        });
    });
    it('should parse files with annotated empty token groups', function () {
        var parsed = parser.parse({
            css: [{ filename: 'empty.css', content: TEST_FILES.withEmptyTokenGroup }],
            scss: [{ filename: 'empty.css', content: TEST_FILES.withEmptyTokenGroup }]
        });
        expect(parsed).toEqual({
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: Infinity, start: 1 },
                    presenter: 'Swatch',
                    tokens: []
                }
            ],
            hardCodedValues: [],
            keyframes: ''
        });
    });
    it('should parse files with a single token group', function () {
        var parsed = parser.parse({
            css: [{ filename: 'single.css', content: TEST_FILES.singleTokenGroup }]
        });
        expect(parsed).toEqual({
            hardCodedValues: [],
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: Infinity, start: 1 },
                    presenter: 'Swatch',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: true,
                            key: '--blue',
                            value: 'blue'
                        },
                        {
                            aliases: [],
                            description: '',
                            editable: true,
                            key: '--red',
                            value: 'red'
                        }
                    ]
                }
            ],
            keyframes: ''
        });
    });
    it('should parse files with multiple token groups', function () {
        var parsed = parser.parse({
            css: [
                { filename: 'multiple.css', content: TEST_FILES.multipleTokenGroup }
            ]
        });
        expect(parsed).toEqual({
            hardCodedValues: [],
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: 10, start: 1 },
                    presenter: 'Swatch',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: true,
                            key: '--blue',
                            value: 'blue'
                        },
                        {
                            aliases: [],
                            description: '',
                            editable: true,
                            key: '--red',
                            value: 'red'
                        }
                    ]
                },
                {
                    label: 'Font Sizes',
                    position: { end: Infinity, start: 11 },
                    presenter: 'FontSize',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: true,
                            key: '--fs-m',
                            value: '14px'
                        }
                    ]
                }
            ],
            keyframes: ''
        });
    });
    it('should parse files with keyframes', function () {
        var parsed = parser.parse({
            css: [{ filename: 'withKeyframe.css', content: TEST_FILES.withKeyframe }]
        });
        expect(parsed.keyframes).toBeDefined();
        expect(parsed.keyframes).toContain('fade-in');
    });
    it('should parse multiple files', function () {
        var parsed = parser.parse({
            css: [
                { filename: 'multiple.css', content: TEST_FILES.multipleTokenGroup },
                { filename: 'empty.css', content: TEST_FILES.empty },
                {
                    filename: 'withoutAnnotations.css',
                    content: TEST_FILES.withoutAnnotations
                }
            ]
        });
        JSON.stringify(parsed);
        expect(parsed).toEqual({
            hardCodedValues: [
                {
                    token: {
                        aliases: [],
                        description: '',
                        editable: true,
                        key: '--red',
                        value: 'red'
                    },
                    values: [
                        {
                            file: 'withoutAnnotations.css',
                            line: 1,
                            value: 'red'
                        }
                    ]
                }
            ],
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: 10, start: 1 },
                    presenter: 'Swatch',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: true,
                            key: '--blue',
                            value: 'blue'
                        },
                        {
                            aliases: [],
                            description: '',
                            editable: true,
                            key: '--red',
                            value: 'red'
                        }
                    ]
                },
                {
                    label: 'Font Sizes',
                    position: { end: Infinity, start: 11 },
                    presenter: 'FontSize',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: true,
                            key: '--fs-m',
                            value: '14px'
                        }
                    ]
                }
            ],
            keyframes: ''
        });
    });
    it('should sort token groups alphabetically', function () {
        var parsed = parser.parse({
            css: [
                { filename: 'multiple.css', content: TEST_FILES.multipleTokenGroup },
                {
                    filename: 'withoutAnnotations.css',
                    content: TEST_FILES.withoutAnnotations
                }
            ]
        });
        expect(parsed.tokenGroups.map(function (g) { return g.label; })).toEqual([
            'Colors',
            'Font Sizes'
        ]);
    });
    it('should recognize aliases', function () {
        var parsed = parser.parse({
            css: [{ filename: 'withAliases.css', content: TEST_FILES.withAliases }]
        });
        expect(parsed).toEqual({
            hardCodedValues: [],
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: Infinity, start: 1 },
                    presenter: 'Swatch',
                    tokens: [
                        {
                            aliases: ['--primary'],
                            description: '',
                            editable: true,
                            key: '--blue',
                            value: 'blue'
                        },
                        {
                            aliases: ['--secondary'],
                            description: '',
                            editable: true,
                            key: '--red',
                            value: 'red'
                        }
                    ]
                }
            ],
            keyframes: ''
        });
    });
});
