"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var less_parser_1 = require("./less.parser");
var TEST_FILES = {
    empty: '',
    multipleTokenGroup: "/**\n    * @tokens Colors\n    * @presenter Swatch\n    */\n\n    @blue: blue;\n    @red: red;\n\n    /**\n    * @tokens Font Sizes\n    * @presenter FontSize\n    */\n\n    @fs-m: 14px;\n  ",
    singleTokenGroup: "/**\n    * @tokens Colors\n    * @presenter Swatch\n    */\n\n     @blue: blue;\n     @red: red;\n     @hsl: hsl(0, 100%, 50%);\n     @gradient: linear-gradient(90deg, #f00 50%, #0f0 100%);\n  ",
    withAliases: "/**\n    * @tokens Colors\n    * @presenter Swatch\n    */\n\n    @blue: blue;\n    @red: red;\n\n    @primary: @blue;\n    @secondary: @red;\n  ",
    withEmptyTokenGroup: "/**\n  * @tokens Colors\n  * @presenter Swatch\n  */",
    withKeyframe: "/**\n  * @tokens Animations\n  * @presenter Animation\n  */\n\n   @keyframes fade-in {\n     from {\n       opacity: 0;\n     }\n     to {\n       opacity: 1;\n     }\n   }",
    withoutAnnotations: 'body { color: red; }'
};
describe('LessParser', function () {
    var parser;
    beforeEach(function () {
        parser = new less_parser_1.LessParser();
    });
    it('should parse empty token file list', function () {
        expect(parser.parse({ css: [], less: [] })).toEqual({
            hardCodedValues: [],
            keyframes: '',
            tokenGroups: []
        });
    });
    it('should parse empty token files', function () {
        expect(parser.parse({
            css: [{ filename: 'empty.css', content: TEST_FILES.empty }],
            less: [{ filename: 'empty.css', content: TEST_FILES.empty }]
        })).toEqual({
            hardCodedValues: [],
            keyframes: '',
            tokenGroups: []
        });
    });
    it('should parse files without annotations', function () {
        expect(parser.parse({
            css: [
                {
                    filename: 'withoutAnnotations.css',
                    content: TEST_FILES.withoutAnnotations
                }
            ],
            less: [
                {
                    filename: 'withoutAnnotations.css',
                    content: TEST_FILES.withoutAnnotations
                }
            ]
        })).toEqual({
            hardCodedValues: [],
            keyframes: '',
            tokenGroups: []
        });
    });
    it('should parse files with annotated empty token groups', function () {
        var parsed = parser.parse({
            css: [{ filename: 'empty.css', content: TEST_FILES.withEmptyTokenGroup }],
            less: [{ filename: 'empty.css', content: TEST_FILES.withEmptyTokenGroup }]
        });
        expect(parsed).toEqual({
            hardCodedValues: [],
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: Infinity, start: 1 },
                    presenter: 'Swatch',
                    tokens: []
                }
            ],
            keyframes: ''
        });
    });
    it('should parse files with a single token group', function () {
        var parsed = parser.parse({
            less: [{ filename: 'single.css', content: TEST_FILES.singleTokenGroup }]
        });
        expect(parsed).toEqual({
            hardCodedValues: [],
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: Infinity, start: 1 },
                    presenter: 'Swatch',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@blue',
                            value: 'blue'
                        },
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@red',
                            value: 'red'
                        },
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@hsl',
                            value: 'hsl(0, 100%, 50%)'
                        },
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@gradient',
                            value: 'linear-gradient(90deg, #f00 50%, #0f0 100%)'
                        }
                    ]
                }
            ],
            keyframes: ''
        });
    });
    it('should parse files with multiple token groups', function () {
        var parsed = parser.parse({
            less: [
                { filename: 'multiple.css', content: TEST_FILES.multipleTokenGroup }
            ]
        });
        expect(parsed).toEqual({
            hardCodedValues: [],
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: 8, start: 1 },
                    presenter: 'Swatch',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@blue',
                            value: 'blue'
                        },
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@red',
                            value: 'red'
                        }
                    ]
                },
                {
                    label: 'Font Sizes',
                    position: { end: Infinity, start: 9 },
                    presenter: 'FontSize',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@fs-m',
                            value: '14px'
                        }
                    ]
                }
            ],
            keyframes: ''
        });
    });
    it('should parse files with keyframes', function () {
        var parsed = parser.parse({
            less: [{ filename: 'withKeyframe.css', content: TEST_FILES.withKeyframe }]
        });
        expect(parsed).toBeDefined();
        expect(parsed.keyframes).toContain('fade-in');
    });
    it('should parse multiple files', function () {
        var parsed = parser.parse({
            less: [
                { filename: 'multiple.css', content: TEST_FILES.multipleTokenGroup },
                { filename: 'empty.css', content: TEST_FILES.empty },
                {
                    filename: 'withoutAnnotations.css',
                    content: TEST_FILES.withoutAnnotations
                }
            ]
        });
        expect(parsed).toEqual({
            hardCodedValues: [
                {
                    token: {
                        aliases: [],
                        description: '',
                        editable: false,
                        key: '@red',
                        value: 'red'
                    },
                    values: [{ file: 'withoutAnnotations.css', line: 1, value: 'red' }]
                }
            ],
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: 8, start: 1 },
                    presenter: 'Swatch',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@blue',
                            value: 'blue'
                        },
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@red',
                            value: 'red'
                        }
                    ]
                },
                {
                    label: 'Font Sizes',
                    position: { end: Infinity, start: 9 },
                    presenter: 'FontSize',
                    tokens: [
                        {
                            aliases: [],
                            description: '',
                            editable: false,
                            key: '@fs-m',
                            value: '14px'
                        }
                    ]
                }
            ],
            keyframes: ''
        });
    });
    it('should sort token groups alphabetically', function () {
        var parsed = parser.parse({
            less: [
                { filename: 'multiple.css', content: TEST_FILES.multipleTokenGroup },
                {
                    filename: 'withoutAnnotations.css',
                    content: TEST_FILES.withoutAnnotations
                }
            ]
        });
        expect(parsed.tokenGroups.map(function (g) { return g.label; })).toEqual([
            'Colors',
            'Font Sizes'
        ]);
    });
    it('should recognize aliases', function () {
        var parsed = parser.parse({
            less: [{ filename: 'withAliases.css', content: TEST_FILES.withAliases }]
        });
        expect(parsed).toEqual({
            hardCodedValues: [],
            tokenGroups: [
                {
                    label: 'Colors',
                    position: { end: Infinity, start: 1 },
                    presenter: 'Swatch',
                    tokens: [
                        {
                            aliases: ['@primary'],
                            description: '',
                            editable: false,
                            key: '@blue',
                            value: 'blue'
                        },
                        {
                            aliases: ['@secondary'],
                            description: '',
                            editable: false,
                            key: '@red',
                            value: 'red'
                        }
                    ]
                }
            ],
            keyframes: ''
        });
    });
});
