import { renderRule, TransformedMeta, TransformMetaFn } from "datocms-structured-text-generic-html-renderer";
import { Record as StructuredTextGraphQlResponseRecord, Document as StructuredTextDocument, RenderError, RenderResult, RenderRule, Node, StructuredText as StructuredTextGraphQlResponse } from "datocms-structured-text-utils";
import { ReactElement } from "react";
export { renderRule, RenderError, };
export type { StructuredTextGraphQlResponse, StructuredTextDocument, StructuredTextGraphQlResponseRecord, };
declare type AdapterReturn = ReactElement | string | null;
export declare const defaultAdapter: {
    renderNode: (...args: any) => AdapterReturn;
    renderFragment: (children: ReactElement | null[], key: string) => AdapterReturn;
    renderText: (text: string, key: string) => AdapterReturn;
};
export declare function appendKeyToValidElement(element: ReactElement | null, key: string): ReactElement | null;
declare type H = typeof defaultAdapter.renderNode;
declare type T = typeof defaultAdapter.renderText;
declare type F = typeof defaultAdapter.renderFragment;
declare type RenderInlineRecordContext<R extends StructuredTextGraphQlResponseRecord> = {
    record: R;
};
declare type RenderRecordLinkContext<R extends StructuredTextGraphQlResponseRecord> = {
    record: R;
    children: RenderResult<H, T, F>;
    transformedMeta: TransformedMeta;
};
declare type RenderBlockContext<R extends StructuredTextGraphQlResponseRecord> = {
    record: R;
};
export declare type StructuredTextPropTypes<R extends StructuredTextGraphQlResponseRecord> = {
    /** The actual field value you get from DatoCMS **/
    data: StructuredTextGraphQlResponse<R> | StructuredTextDocument | Node | null | undefined;
    /** A set of additional rules to convert the document to JSX **/
    customRules?: RenderRule<H, T, F>[];
    /** Fuction that converts an 'inlineItem' node into React **/
    renderInlineRecord?: (context: RenderInlineRecordContext<R>) => ReactElement | null;
    /** Fuction that converts an 'itemLink' node into React **/
    renderLinkToRecord?: (context: RenderRecordLinkContext<R>) => ReactElement | null;
    /** Fuction that converts a 'block' node into React **/
    renderBlock?: (context: RenderBlockContext<R>) => ReactElement | null;
    /** Function that converts 'link' and 'itemLink' `meta` into HTML props */
    metaTransformer?: TransformMetaFn;
    /** Fuction that converts a simple string text into React **/
    renderText?: T;
    /** React.createElement-like function to use to convert a node into React **/
    renderNode?: H;
    /** Function to use to generate a React.Fragment **/
    renderFragment?: F;
};
export declare function StructuredText<R extends StructuredTextGraphQlResponseRecord>({ data, renderInlineRecord, renderLinkToRecord, renderBlock, renderText, renderNode, renderFragment, customRules, metaTransformer, }: StructuredTextPropTypes<R>): ReactElement | null;
