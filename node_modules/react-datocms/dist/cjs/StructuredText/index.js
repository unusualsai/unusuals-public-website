"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
exports.__esModule = true;
exports.StructuredText = exports.appendKeyToValidElement = exports.defaultAdapter = exports.RenderError = exports.renderRule = void 0;
var datocms_structured_text_generic_html_renderer_1 = require("datocms-structured-text-generic-html-renderer");
exports.renderRule = datocms_structured_text_generic_html_renderer_1.renderRule;
var datocms_structured_text_utils_1 = require("datocms-structured-text-utils");
exports.RenderError = datocms_structured_text_utils_1.RenderError;
var react_1 = __importStar(require("react"));
exports.defaultAdapter = {
    renderNode: react_1["default"].createElement,
    renderFragment: function (children, key) { return react_1["default"].createElement(react_1["default"].Fragment, { key: key }, children); },
    renderText: function (text, key) { return text; }
};
function appendKeyToValidElement(element, key) {
    if (react_1.isValidElement(element) && element.key === null) {
        return react_1.cloneElement(element, { key: key });
    }
    return element;
}
exports.appendKeyToValidElement = appendKeyToValidElement;
function StructuredText(_a) {
    var data = _a.data, renderInlineRecord = _a.renderInlineRecord, renderLinkToRecord = _a.renderLinkToRecord, renderBlock = _a.renderBlock, renderText = _a.renderText, renderNode = _a.renderNode, renderFragment = _a.renderFragment, customRules = _a.customRules, metaTransformer = _a.metaTransformer;
    var result = datocms_structured_text_generic_html_renderer_1.render({
        renderText: renderText || exports.defaultAdapter.renderText,
        renderNode: renderNode || exports.defaultAdapter.renderNode,
        renderFragment: renderFragment || exports.defaultAdapter.renderFragment
    }, data, [
        datocms_structured_text_generic_html_renderer_1.renderRule(datocms_structured_text_utils_1.isInlineItem, function (_a) {
            var node = _a.node, key = _a.key;
            if (!renderInlineRecord) {
                throw new datocms_structured_text_utils_1.RenderError("The Structured Text document contains an 'inlineItem' node, but no 'renderInlineRecord' prop is specified!", node);
            }
            if (!datocms_structured_text_utils_1.isStructuredText(data) || !data.links) {
                throw new datocms_structured_text_utils_1.RenderError("The document contains an 'itemLink' node, but the passed data prop is not a Structured Text GraphQL response, or data.links is not present!", node);
            }
            var item = data.links.find(function (item) { return item.id === node.item; });
            if (!item) {
                throw new datocms_structured_text_utils_1.RenderError("The Structured Text document contains an 'inlineItem' node, but cannot find a record with ID " + node.item + " inside data.links!", node);
            }
            return appendKeyToValidElement(renderInlineRecord({ record: item }), key);
        }),
        datocms_structured_text_generic_html_renderer_1.renderRule(datocms_structured_text_utils_1.isItemLink, function (_a) {
            var node = _a.node, key = _a.key, children = _a.children;
            if (!renderLinkToRecord) {
                throw new datocms_structured_text_utils_1.RenderError("The Structured Text document contains an 'itemLink' node, but no 'renderLinkToRecord' prop is specified!", node);
            }
            if (!datocms_structured_text_utils_1.isStructuredText(data) || !data.links) {
                throw new datocms_structured_text_utils_1.RenderError("The document contains an 'itemLink' node, but the passed data prop is not a Structured Text GraphQL response, or data.links is not present!", node);
            }
            var item = data.links.find(function (item) { return item.id === node.item; });
            if (!item) {
                throw new datocms_structured_text_utils_1.RenderError("The Structured Text document contains an 'itemLink' node, but cannot find a record with ID " + node.item + " inside data.links!", node);
            }
            return appendKeyToValidElement(renderLinkToRecord({
                record: item,
                children: children,
                transformedMeta: node.meta
                    ? (metaTransformer || datocms_structured_text_generic_html_renderer_1.defaultMetaTransformer)({
                        node: node,
                        meta: node.meta
                    })
                    : null
            }), key);
        }),
        datocms_structured_text_generic_html_renderer_1.renderRule(datocms_structured_text_utils_1.isBlock, function (_a) {
            var node = _a.node, key = _a.key;
            if (!renderBlock) {
                throw new datocms_structured_text_utils_1.RenderError("The Structured Text document contains a 'block' node, but no 'renderBlock' prop is specified!", node);
            }
            if (!datocms_structured_text_utils_1.isStructuredText(data) || !data.blocks) {
                throw new datocms_structured_text_utils_1.RenderError("The document contains an 'block' node, but the passed data prop is not a Structured Text GraphQL response, or data.blocks is not present!", node);
            }
            var item = data.blocks.find(function (item) { return item.id === node.item; });
            if (!item) {
                throw new datocms_structured_text_utils_1.RenderError("The Structured Text document contains a 'block' node, but cannot find a record with ID " + node.item + " inside data.blocks!", node);
            }
            return appendKeyToValidElement(renderBlock({ record: item }), key);
        }),
    ].concat(customRules || []), metaTransformer);
    return result;
}
exports.StructuredText = StructuredText;
//# sourceMappingURL=index.js.map