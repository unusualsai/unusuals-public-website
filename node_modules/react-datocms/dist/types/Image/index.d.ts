import React from "react";
import "intersection-observer";
export declare type ResponsiveImageType = {
    /** The aspect ratio (width/height) of the image */
    aspectRatio: number;
    /** A base64-encoded thumbnail to offer during image loading */
    base64?: string;
    /** The height of the image */
    height?: number;
    /** The width of the image */
    width: number;
    /** The HTML5 `sizes` attribute for the image */
    sizes?: string;
    /** The fallback `src` attribute for the image */
    src?: string;
    /** The HTML5 `srcSet` attribute for the image */
    srcSet?: string;
    /** The HTML5 `srcSet` attribute for the image in WebP format, for browsers that support the format */
    webpSrcSet?: string;
    /** The background color for the image placeholder */
    bgColor?: string;
    /** Alternate text (`alt`) for the image */
    alt?: string;
    /** Title attribute (`title`) for the image */
    title?: string;
};
declare type ImagePropTypes = {
    /** The actual response you get from a DatoCMS `responsiveImage` GraphQL query */
    data: ResponsiveImageType;
    /** Additional CSS className for root node */
    className?: string;
    /** Additional CSS class for the image inside the `<picture />` tag */
    pictureClassName?: string;
    /** Duration (in ms) of the fade-in transition effect upoad image loading */
    fadeInDuration?: number;
    /** @deprecated Use the intersectionThreshold prop */
    intersectionTreshold?: number;
    /** Indicate at what percentage of the placeholder visibility the loading of the image should be triggered. A value of 0 means that as soon as even one pixel is visible, the callback will be run. A value of 1.0 means that the threshold isn't considered passed until every pixel is visible */
    intersectionThreshold?: number;
    /** Margin around the placeholder. Can have values similar to the CSS margin property (top, right, bottom, left). The values can be percentages. This set of values serves to grow or shrink each side of the placeholder element's bounding box before computing intersections */
    intersectionMargin?: string;
    /** Wheter enable lazy loading or not */
    lazyLoad?: boolean;
    /** Additional CSS rules to add to the root node */
    style?: React.CSSProperties;
    /** Additional CSS rules to add to the image inside the `<picture />` tag */
    pictureStyle?: React.CSSProperties;
    /** Wheter the image wrapper should explicitely declare the width of the image or keep it fluid */
    explicitWidth?: boolean;
};
export declare const Image: React.FC<ImagePropTypes>;
export {};
