"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var index_1 = require("../index");
var p_defer_1 = __importDefault(require("p-defer"));
var makeFakeFetch = function () {
    var times = 0;
    var fetcher = function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (times === 0) {
                times += 1;
                return [2 /*return*/, {
                        status: 500,
                        statusText: "Server error",
                        headers: {
                            get: function () { return "application/json"; }
                        },
                        json: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/, ({ url: "foo" })];
                        }); }); }
                    }];
            }
            return [2 /*return*/, {
                    status: 200,
                    statusText: "OK",
                    headers: {
                        get: function () { return "application/json"; }
                    },
                    json: function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, ({ url: "bar" })];
                    }); }); }
                }];
        });
    }); };
    return fetcher;
};
var streams = [];
var MyEventSource = /** @class */ (function () {
    function MyEventSource() {
        this.stream = { listeners: {} };
        streams.push(this.stream);
    }
    MyEventSource.prototype.addEventListener = function (event, cb) {
        this.stream.listeners[event] = __spreadArrays((this.stream.listeners[event] || []), [
            cb,
        ]);
    };
    MyEventSource.prototype.close = function () {
    };
    return MyEventSource;
}());
var MockEventSource = MyEventSource;
describe("subscribeToQuery", function () {
    beforeEach(function () {
        streams = [];
    });
    it("returns an unsubscribe function", function () { return __awaiter(void 0, void 0, void 0, function () {
        var fetcher, unsubscribePromise, unsubscribe;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetcher = makeFakeFetch();
                    unsubscribePromise = index_1.subscribeToQuery({
                        query: "{ allBlogPosts(first: 1) { title } }",
                        token: "XXX",
                        preview: true,
                        environment: "foobar",
                        reconnectionPeriod: 10,
                        fetcher: fetcher,
                        eventSourceClass: MockEventSource,
                        onUpdate: function (data) { }
                    });
                    setTimeout(function () {
                        if (streams[0].listeners["open"]) {
                            streams[0].listeners["open"].forEach(function (cb) { return cb(true); });
                        }
                    }, 100);
                    return [4 /*yield*/, unsubscribePromise];
                case 1:
                    unsubscribe = _a.sent();
                    expect(unsubscribe).toBeTruthy();
                    return [2 /*return*/];
            }
        });
    }); });
    it("handles channelError fatal events", function () { return __awaiter(void 0, void 0, void 0, function () {
        var fetcher, onChannelErrorDefer, error;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetcher = makeFakeFetch();
                    onChannelErrorDefer = p_defer_1["default"]();
                    index_1.subscribeToQuery({
                        query: "{ allBlogPosts(first: 1) { title } }",
                        token: "XXX",
                        preview: true,
                        environment: "foobar",
                        reconnectionPeriod: 10,
                        fetcher: fetcher,
                        eventSourceClass: MockEventSource,
                        onUpdate: function (data) { },
                        onChannelError: function (error) {
                            onChannelErrorDefer.resolve(error);
                        }
                    });
                    setTimeout(function () {
                        if (streams[0].listeners["open"]) {
                            streams[0].listeners["open"].forEach(function (cb) { return cb(true); });
                        }
                    }, 100);
                    setTimeout(function () {
                        if (streams[0].listeners["channelError"]) {
                            var error_1 = {
                                data: JSON.stringify({
                                    fatal: true
                                })
                            };
                            streams[0].listeners["channelError"].forEach(function (cb) { return cb(error_1); });
                        }
                    }, 200);
                    return [4 /*yield*/, onChannelErrorDefer.promise];
                case 1:
                    error = _a.sent();
                    expect(error.fatal).toEqual(true);
                    return [2 /*return*/];
            }
        });
    }); });
    it("handles update events", function () { return __awaiter(void 0, void 0, void 0, function () {
        var fetcher, onUpdateEventDefer, data;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    fetcher = makeFakeFetch();
                    onUpdateEventDefer = p_defer_1["default"]();
                    index_1.subscribeToQuery({
                        query: "{ allBlogPosts(first: 1) { title } }",
                        token: "XXX",
                        preview: true,
                        environment: "foobar",
                        reconnectionPeriod: 10,
                        fetcher: fetcher,
                        eventSourceClass: MockEventSource,
                        onUpdate: function (data) {
                            onUpdateEventDefer.resolve(data);
                        }
                    });
                    setTimeout(function () {
                        if (streams[0].listeners["open"]) {
                            streams[0].listeners["open"].forEach(function (cb) { return cb(true); });
                        }
                    }, 100);
                    setTimeout(function () {
                        if (streams[0].listeners["update"]) {
                            var error_2 = {
                                data: JSON.stringify(true)
                            };
                            streams[0].listeners["update"].forEach(function (cb) { return cb(error_2); });
                        }
                    }, 200);
                    return [4 /*yield*/, onUpdateEventDefer.promise];
                case 1:
                    data = _a.sent();
                    expect(data).toEqual(true);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=index.test.js.map