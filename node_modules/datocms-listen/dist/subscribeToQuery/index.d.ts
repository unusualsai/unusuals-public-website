export declare type UpdateData<QueryResult> = {
    /** The raw GraphQL response */
    response: {
        /** GraphQL response `data` property */
        data: QueryResult;
    };
};
export declare type ChannelErrorData = {
    /** The code of the error (ie. `INVALID_QUERY`) */
    code: string;
    /** An human friendly message explaining the error */
    message: string;
    /** If the error is not fatal (ie. the query is invalid), the query will be retried after some time */
    fatal: boolean;
    /** The raw error response, if available */
    response?: any;
};
export declare type ConnectionStatus = 'connecting' | 'connected' | 'closed';
export declare type Options<QueryResult, QueryVariables> = {
    /** The GraphQL query to subscribe */
    query: string;
    /** GraphQL variables for the query */
    variables?: QueryVariables;
    /** DatoCMS API token to use */
    token: string;
    /** If true, the Content Delivery API with draft content will be used */
    preview?: boolean;
    /** The name of the DatoCMS environment where to perform the query (defaults to primary environment) */
    environment?: string;
    /** In case of network errors, the period to wait to reconnect */
    reconnectionPeriod?: number;
    /** The fetch function to use to perform the registration query */
    fetcher?: (input: RequestInfo, init?: RequestInit) => Promise<Response>;
    /** The EventSource class to use to open up the SSE connection */
    eventSourceClass?: {
        new (url: string, eventSourceInitDict?: EventSourceInit | undefined): EventSource;
        prototype: EventSource;
        readonly CLOSED: number;
        readonly CONNECTING: number;
        readonly OPEN: number;
    };
    /** The base URL to use to perform the query (defaults to `https://graphql-listen.datocms.com`) */
    baseUrl?: string;
    /** Callback function to call on status change */
    onStatusChange?: (status: ConnectionStatus) => void;
    /** Callback function to call on query result updates */
    onUpdate: (updateData: UpdateData<QueryResult>) => void;
    /** Callback function to call on errors */
    onChannelError?: (errorData: ChannelErrorData) => void;
};
export declare type UnsubscribeFn = () => void;
export declare function subscribeToQuery<QueryResult = any, QueryVariables = Record<string, any>>(options: Options<QueryResult, QueryVariables>): Promise<UnsubscribeFn>;
